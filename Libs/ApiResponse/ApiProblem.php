<?php

/**
 * @author   Rafal Przetakowski <rafal.p@beeflow.co.uk>
 * @copyright: (c) 2017 Beeflow Ltd
 *
 * Date: 24.09.17 19:20
 */

declare(strict_types=1);

namespace BMServerBundle\Server\Libs\ApiResponse;

use BMServerBundle\Server\Traits\RequiredCheckTrait;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * @see https://tools.ietf.org/html/rfc7807
 */
class ApiProblem
{
    use RequiredCheckTrait;

    /**
     * @var string
     */
    private $apiVersion = '1.0';

    /**
     * A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when
     * dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML
     * [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be "about:blank".
     *
     * @var string
     */
    private $problemType;

    /**
     * A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section
     * 3.4)
     *
     * @var string
     */
    private $title = 'Bad request';

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     *
     * @var int
     */
    private $status = 400;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     *
     * @var string
     */
    private $detail;

    /**
     * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further
     * information if dereferenced.
     *
     * @var string
     */
    private $problemInstance;

    /**
     * @var int
     */
    private $balance;

    /**
     * @var array
     */
    private $accounts = [];

    /**
     * Opcjonalna lista parametrów
     *
     * @var array[
     *      [
     *          'name'   => '',
     *          'reason' => ''
     *      ]
     * ];
     */
    private $invalidParams = [];

    /**
     * @param string $problemType
     *
     * @return ApiProblem
     */
    public function setProblemType(string $problemType): ApiProblem
    {
        $this->problemType = $problemType;

        return $this;
    }

    /**
     * @param string $title
     *
     * @return ApiProblem
     */
    public function setTitle(string $title): ApiProblem
    {
        $this->title = $title;

        return $this;
    }

    /**
     * @param int $status
     *
     * @return ApiProblem
     */
    public function setStatus(int $status): ApiProblem
    {
        $this->status = $status;

        return $this;
    }

    /**
     * @param string $detail
     *
     * @return ApiProblem
     */
    public function setDetail(string $detail): ApiProblem
    {
        $this->detail = $detail;

        return $this;
    }

    /**
     * @param string $problemInstance
     *
     * @return ApiProblem
     */
    public function setProblemInstance(string $problemInstance): ApiProblem
    {
        $this->problemInstance = $problemInstance;

        return $this;
    }

    /**
     * @param int $balance
     *
     * @return ApiProblem
     */
    public function setBalance(int $balance): ApiProblem
    {
        $this->balance = $balance;

        return $this;
    }

    /**
     * @param array $accounts
     *
     * @return ApiProblem
     */
    public function setAccounts(array $accounts): ApiProblem
    {
        $this->accounts = $accounts;

        return $this;
    }

    /**
     * @param string $account
     *
     * @return ApiProblem
     */
    public function addAccounts(string $account): ApiProblem
    {
        $this->accounts[] = $account;

        return $this;
    }

    /**
     * @param array $invalidParams [['name', 'reason']]
     *
     * @return ApiProblem
     */
    public function setInvalidParams(array $invalidParams): ApiProblem
    {
        foreach ($invalidParams as $param) {
            $this->addInvalidParam($param);
        }

        return $this;
    }

    /**
     * @param array $invalidParam ['name', 'reason']
     *
     * @return ApiProblem
     */
    public function addInvalidParam(array $invalidParam): ApiProblem
    {
        if (!$this->hasAllRequired($invalidParam, ['name', 'reason'])) {
            return $this;
        }

        $this->invalidParams[] = $invalidParam;

        return $this;
    }

    /**
     * Przygotowuje odpowiedź w postaci JsonResponse
     *
     * @return JsonResponse
     */
    public function getResponse(): JsonResponse
    {
        $response = [
            'jsonApi' => [
                'version' => $this->apiVersion
            ],
            'title' => $this->title,
            'detail' => $this->detail,
            'problemInstance' => $this->problemInstance,
            'balance' => $this->balance,
            'status' => $this->status
        ];

        if (!empty($this->accounts)) {
            $response['accounts'] = $this->accounts;
        }

        if (!empty($this->problemType)) {
            $response['problemType'] = $this->problemType;
        }

        if (!empty($this->invalidParams)) {
            $response['invalidParams'] = $this->invalidParams;
        }

        return new JsonResponse($response, $this->status, ['Content-Type' => 'application/api-problem+json']);
    }
}
